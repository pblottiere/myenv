"------------------------------------------------------------------------------
" general
"------------------------------------------------------------------------------
set mouse=a

" syntax highlighting and colors
syntax on
" set t_Co=256
set encoding=utf-8
colorscheme archery
set termguicolors

" do not interpret latex symbols
let g:tex_conceal = ""

" windows
map vsplit vs

nmap <silent> <S-Up> :wincmd k<CR>
nmap <silent> <S-Down> :wincmd j<CR>
nmap <silent> <S-Left> :wincmd h<CR>
nmap <silent> <S-Right> :wincmd l<CR>

set fillchars+=vert:\ "

" auto remove whitespace
autocmd BufWritePre * :%s/\s\+$//e

" 80 columns
" set colorcolumn=81
" augroup vimrc_autocmds
"     autocmd BufEnter * highlight OverLength ctermbg=249
"     autocmd BufEnter * match OverLength /\%81v.*/
" augroup END

" tab => 4 spaces
" filetype plugin indent on
" set tabstop=4
" set shiftwidth=4
" set expandtab
set expandtab
set shiftwidth=4
set softtabstop=4

autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4

" no .swp file
set noswapfile

" line number
set nonumber

function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
        " SyntasticCheck " reactive syntastic sign bar
    else
        set relativenumber
        " SyntasticToggleMode " deactive syntastic sign bar
    endif
endfunc

nnoremap <C-l> :call NumberToggle()<CR>

" search conf
set smartcase
set hlsearch
nmap <C-b> :noh<CR>

"------------------------------------------------------------------------------
" plugins
"------------------------------------------------------------------------------
" plugin manager
execute pathogen#infect()

" nerdtree
" autocmd VimEnter * NERDTree " start nerdtree at startup
autocmd VimEnter * wincmd p
autocmd BufEnter * NERDTreeMirror
nmap <silent> <c-n> :NERDTreeToggle<CR>

let NERDTreeIgnore=['\.o$', '\~$', '\.so$', '\.pyc$', '\.pyf$', '__pycache__', 'venv', 'poetry.lock', '\.log', 'dist']
let g:NERDTreeWinSize=25
let g:NERDTreeDirArrows=1

autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" "⚠"
let g:syntastic_warning_symbol = "●"
let g:syntastic_error_symbol = "✗"
let g:syntastic_style_error_symbol = "✗"
let g:syntastic_style_warning_symbol = "●"

let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_highlighting = 0

let g:syntastic_aggregate_errors = 1

let g:syntastic_cpp_checkers = ['gcc', 'cppcheck', 'verapp']
let g:syntastic_cpp_check_header = 1

let g:syntastic_arduino_checkers = ['avrgcc']
let g:syntastic_arduino_check_header = 1

" you complete me
set completeopt-=preview
let g:ycm_confirm_extra_conf=0
let g:ycm_use_ultisnips_completer = 1

nnoremap f :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>

autocmd CompleteDone * pclose

" folding
" setlocal foldmethod=indent
" setlocal foldcolumn=1
" setlocal foldlevel=0
" setlocal foldlevelstart=0
"
" autocmd BufRead * set foldmethod=indent
" autocmd BufRead * set foldcolumn=1
" autocmd BufRead * set foldlevel=0
" autocmd BufRead * set foldlevelstart=0

" tagbar
nnoremap <silent> <c-t> :TagbarToggle<CR>
nnoremap <silent> <c-j> :TagbarOpen j<CR>

" spell
nnoremap <silent> <c-e> :set spell spelllang=fr<CR>
nnoremap <silent> <c-h> :set spell spelllang=en<CR>

" snippets
let g:UltiSnipsExpandTrigger="<c-y>"

" airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" let g:Powerline_symbols = 'unicode'
let g:airline_symbols.space = "\ua0"
let g:airline_powerline_fonts = 1
let g:airline#extensions#syntastic#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
set laststatus=2
let g:airline_theme = 'minimalist'
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#branch#enabled=1
" let g:airline_theme = 'archery'

" a.vim
map <F4> :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>

" ConqueGDB
" let g:ConqueTerm_StartMessages = 1
" let g:ConqueTerm_CloseOnEnd = 1
