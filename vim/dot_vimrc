"------------------------------------------------------------------------------
" general
"------------------------------------------------------------------------------
" syntax highlighting and colors
syntax on
set t_Co=256
colorscheme tergeist

" windows
map vsplit vs

nmap <silent> <S-Up> :wincmd k<CR>
nmap <silent> <S-Down> :wincmd j<CR>
nmap <silent> <S-Left> :wincmd h<CR>
nmap <silent> <S-Right> :wincmd l<CR>

set fillchars+=vert:\ "

" auto remove whitespace
autocmd BufWritePre * :%s/\s\+$//e

" 80 columns
" set colorcolumn=81
augroup vimrc_autocmds
    autocmd BufEnter * highlight OverLength ctermbg=black guibg=#111111
    autocmd BufEnter * match OverLength /\%81v.*/
augroup END

" tab => 4 spaces
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab

" no .swp file
set noswapfile

" line number
set nonumber

function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
        " SyntasticCheck " reactive syntastic sign bar
    else
        set relativenumber
        " SyntasticToggleMode " deactive syntastic sign bar
    endif
endfunc

nnoremap <C-l> :call NumberToggle()<CR>

"------------------------------------------------------------------------------
" plugins
"------------------------------------------------------------------------------
" plugin manager
execute pathogen#infect()

" nerdtree
" autocmd VimEnter * NERDTree " start nerdtree at startup
autocmd VimEnter * wincmd p
autocmd BufEnter * NERDTreeMirror
nmap <silent> <c-n> :NERDTreeToggle<CR>

let NERDTreeIgnore=['\.o$', '\~$', '\.so$', '\.pyc$', '\.pyf$']
let g:NERDTreeWinSize=25
let g:NERDTreeDirArrows=1

autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" let g:syntastic_warning_symbol = "⚠"
" let g:syntastic_warning_symbol = "✗"
let g:syntastic_warning_symbol = "●"
" let g:syntastic_error_symbol = "✗"
let g:syntastic_error_symbol = "●"
let g:syntastic_style_warning_symbol = "✗"
let g:syntastic_style_error_symbol = "✗"
" let g:syntastic_style_warning_symbol = "●"
" let g:syntastic_style_error_symbol = "●"

let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_highlighting = 0

let g:syntastic_aggregate_errors = 1

let g:syntastic_cpp_checkers = ['gcc', 'cppcheck', 'verapp']
let g:syntastic_cpp_check_header = 1

let g:syntastic_arduino_checkers = ['avrgcc']
let g:syntastic_arduino_check_header = 1

" you complete me
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

autocmd CompleteDone * pclose

" folding
setlocal foldmethod=indent
setlocal foldcolumn=1
setlocal foldlevel=0
setlocal foldlevelstart=0

autocmd BufRead * set foldmethod=indent
autocmd BufRead * set foldcolumn=1
autocmd BufRead * set foldlevel=0
autocmd BufRead * set foldlevelstart=0

" tagbar
nnoremap <silent> <c-t> :TagbarToggle<CR>
nnoremap <silent> <c-j> :TagbarOpen j<CR>

" spell
nnoremap <silent> <c-r> :set spell spelllang=fr<CR>
nnoremap <silent> <c-h> :set spell spelllang=en<CR>

" snippets
let g:ycm_use_ultisnips_completer = 1
let g:UltiSnipsExpandTrigger="<c-y>"

" airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_powerline_fonts = 0
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
set laststatus=2
let g:airline_theme = 'bubblegum'
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#branch#enabled=1
